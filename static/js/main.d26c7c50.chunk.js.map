{"version":3,"sources":["Price.js","App.js","serviceWorker.js","index.js"],"names":["Price","useState","price","setPrice","change","setChange","arr","setArr","ts","setTs","data","labels","datasets","label","fill","borderColor","useEffect","bat","axios","get","then","resp","ticker","parseFloat","length","x","y","parseInt","timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","interval","setInterval","clearInterval","className","options","maintainAspectRatio","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAIe,SAASA,IAAS,IAAD,EACFC,mBAAS,GADP,mBACrBC,EADqB,KACdC,EADc,OAEAF,mBAAS,GAFT,mBAErBG,EAFqB,KAEbC,EAFa,OAGNJ,mBAAS,IAHH,mBAGrBK,EAHqB,KAGhBC,EAHgB,OAIRN,mBAAS,IAJD,mBAIrBO,EAJqB,KAIjBC,EAJiB,KAKtBC,EAAO,CACTC,OAAO,YAAKH,GACZI,SAAU,CACR,CACEC,MAAO,kBACPH,KAAK,YAAKJ,GACVQ,MAAM,EACNC,YAAa,SAiCrB,OAzBAC,qBAAU,WACN,IAAMC,EAAM,WACRC,IAAMC,IAAI,kDAAkDC,MAC5D,SAAAC,GAGI,GAFAlB,EAASkB,EAAKX,KAAKY,OAAOpB,OAC1BG,EAAUgB,EAAKX,KAAKY,OAAOlB,QACvBmB,WAAWF,EAAKX,KAAKY,OAAOpB,SAAWI,EAAIA,EAAIkB,OAAS,GAAI,CAC5D,IAAIC,EAAIF,WAAWF,EAAKX,KAAKY,OAAOpB,OAChCwB,EAAIC,SAASN,EAAKX,KAAKkB,WACvBC,EAAO,IAAIC,KAAO,IAAFJ,GAChBK,EAAQF,EAAKG,WACbC,EAAU,IAAMJ,EAAKK,aACrBC,EAAU,IAAMN,EAAKO,aACrBC,EAAgBN,EAAQ,IAAME,EAAQK,QAAQ,GAAK,IAAMH,EAAQG,QAAQ,GAC7E/B,GAAO,SAAAD,GAAG,4BAAQA,GAAR,CAAamB,OACvBhB,GAAM,SAAAD,GAAE,4BAAQA,GAAR,CAAY6B,YAKhCpB,IACA,IAAMsB,EAAWC,YAAYvB,EAAK,KAClC,OAAO,kBAAMwB,cAAcF,MAC5B,IAGC,6BACI,yBAAKG,UAAU,KACX,yBAAKA,UAAU,SAAf,IAAyBxC,GACzB,uBAAGwC,UAAU,UAAb,oBAAwCxC,EAAME,IAElD,yBAAKsC,UAAU,oBACX,kBAAC,IAAD,CAAMhC,KAAMA,EAAMiC,QApCZ,CACdC,qBAAqB,OCPdC,MAVf,WACE,OACE,yBAAKH,UAAU,OACb,iEACA,uBAAGA,UAAU,QAAb,sCACA,kBAAC1C,EAAD,QCGc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.d26c7c50.chunk.js","sourcesContent":["import React,{ useState, useEffect }  from \"react\";\nimport axios from \"axios\";\nimport { Line } from 'react-chartjs-2';\n\nexport default function Price() {\n    const [price, setPrice] = useState(0);\n    const [change, setChange] = useState(0);\n    const [arr, setArr] = useState([]);\n    const [ts, setTs] = useState([]);\n    const data = {\n        labels: [...ts],\n        datasets: [\n          {\n            label: 'BAT Price (USD)',\n            data: [...arr],\n            fill: false,          \n            borderColor: 'red' \n          }\n        ]\n      }\n      const options = {\n        maintainAspectRatio: false\t\n      }\n\n    useEffect(() => {\n        const bat = () => {\n            axios.get(\"https://api.cryptonator.com/api/ticker/bat-usd\").then(\n            resp => {\n                setPrice(resp.data.ticker.price);\n                setChange(resp.data.ticker.change);\n                if (parseFloat(resp.data.ticker.price) !== arr[arr.length - 1]) {\n                    let x = parseFloat(resp.data.ticker.price);\n                    let y = parseInt(resp.data.timestamp);\n                    let date = new Date(y*1000);\n                    let hours = date.getHours();\n                    let minutes = \"0\" + date.getMinutes();\n                    let seconds = \"0\" + date.getSeconds();\n                    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n                    setArr(arr => [...arr, x]);\n                    setTs(ts => [...ts, formattedTime]); \n                }\n            });\n        }\n\n        bat();\n        const interval = setInterval(bat, 30000);\n        return () => clearInterval(interval);     \n    }, []);\n\n    return (\n        <div>\n            <div className=\"w\">\n                <div className=\"price\">${price}</div>\n                <p className=\"change\">Price (1h ago): ${price-change}</p>\n            </div>  \n            <div className=\"canvas-container\">\n                <Line data={data} options={options}/>\n            </div>\n        </div>\n        \n    )\n}","import React from 'react';\nimport './App.css';\nimport Price from './Price';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Basic Attention Token (BAT) Price</h1>\n      <p className=\"copy\">*price is updated every 30 seconds</p>\n      <Price />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}